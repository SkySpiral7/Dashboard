import groovy.transform.Field

import java.nio.file.Path
import java.nio.file.Paths

apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.example.e449ps.stormy"
        //lambdas are minSdkVersion 24
        minSdkVersion 24
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        mockServices {
            initWith(buildTypes.debug)
        }
    }
    testBuildType "mockServices"

    //needed for robolectric tests
    testOptions.unitTests.includeAndroidResources = true
    dataBinding.enabled = true
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.vectordrawable:vectordrawable-animated:1.1.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'com.google.android.gms:play-services-location:17.0.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.1.0'

    implementation 'com.google.dagger:dagger:2.24'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.24'

    implementation "com.squareup.okhttp3:okhttp:4.1.1"
    implementation 'com.google.code.gson:gson:2.8.5'

    testImplementation 'junit:junit:4.12'

    //For robolectric tests
    testImplementation 'org.robolectric:robolectric:4.3.1'
    testImplementation 'androidx.test:core:1.2.0'

    //For instrumented tests
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'

    //TODO: clean up below dependencies
    androidTestImplementation "org.mockito:mockito-core:1.9.5"  //just the version number
    androidTestImplementation 'com.google.dexmaker:dexmaker-mockito:1.2'

    testImplementation "org.mockito:mockito-core:1.9.5"  //just the version number
    mockServicesImplementation "org.mockito:mockito-core:1.9.5"  //just the version number
    androidTestAnnotationProcessor 'com.google.dagger:dagger-compiler:2.24'
    mockServicesAnnotationProcessor 'com.google.dagger:dagger-compiler:2.24'
    testImplementation 'org.hamcrest:hamcrest-core:1.3'
    mockServicesImplementation 'org.hamcrest:hamcrest-core:1.3'

    //TODO: sort retrofit deps
    implementation 'com.squareup.retrofit2:retrofit:2.8.1'
    implementation 'com.squareup.retrofit2:converter-gson:2.8.1'
}

//TODO: see if I can move this stuff to the root build.gradle
@Field
private static final String gradlew
if (System.properties['os.name'].toLowerCase().contains('windows')) {
    gradlew = '..\\gradlew.bat'
} else {
    gradlew = '../gradlew'
}
@Field
private static final Path baseReportPath =
        Paths.get(System.getProperty("user.dir"), "build/reports")

/**This will run all tests in androidTest/ folder*/
task runConnectedAndroidTests(type: Exec) {
    createReporterTask(runConnectedAndroidTests, "androidTests/connected")
    commandLine gradlew, 'connectedMockServicesAndroidTest'
}

/**This will run all tests in test/ folder: Robolectric and normal*/
task runJunitTests(type: Exec) {
    createReporterTask(runJunitTests, "tests/testMockServicesUnitTest")
    commandLine gradlew, 'testMockServicesUnitTest'
}

/**This will run all tests in androidTest/ and test/ folders.*/
task runAllTests(dependsOn: ['runConnectedAndroidTests', 'runJunitTests']) {
}

private void createReporterTask(Task previousTask, String reportPath) {
    String taskName = "reporter_" + previousTask.getName()
    previousTask.finalizedBy = [task(taskName) {
        onlyIf {
            previousTask.state.failure != null
        }
        doLast {
            Path indexPath = baseReportPath.resolve(reportPath).resolve("index.html").toAbsolutePath().normalize()
            displayReport(indexPath.toString())
        }
    }]
}

private void displayReport(String filePath) {
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        filePath = filePath.replace("\\", "/")
        filePath = "file:///" + filePath
        exec {
            executable 'explorer'
            args filePath
            ignoreExitValue true
        }
    } else {
        //Jenkins and Windows won't have this variable defined
        //don't run if null or '' because that means there's no UI
        if (System.env.DISPLAY) {
            //TODO: test this on Jenkins and Mac
            filePath = "file://" + filePath
            exec {
                executable 'open'
                args filePath
                ignoreExitValue true
            }
        }
    }
}
